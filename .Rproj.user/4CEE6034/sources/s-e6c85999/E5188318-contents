##################################################################### 
# Author: Jacob Nearing
# Date: April 17th 2019
# Title: Microbiome Helper Random Forest in R tutorial
#####################################################################
####################### Load in Dependencies ########################
source("~/etc/my_Tutorials/RF_tutorial/RF_Utilities.R")
#####################################################################


#####################################################################


### Getting the Data

### load in genus table
Genus_values <- read.table("~/etc/my_Tutorials/RF_tutorial/edd_singh_genera.tsv",
                           sep="\t", header=T, row.names=1)
dim(Genus_values)

### load in metadata
metadata <- read.table("~/etc/my_Tutorials/RF_tutorial/edd_singh.metadata.clean.tsv",
                       sep="\t", header=T, row.names=1)



rownames(metadata)
indexs_to_keep <- which(metadata$total_reads >= 1000)
length(indexs_to_keep)
colnames(Genus_values)
rownames(metadata)

clean_Genus_values <- Genus_values[,indexs_to_keep]
dim(clean_Genus_values)
clean_metadata <- metadata[indexs_to_keep,]
dim(clean_metadata)
colnames(clean_Genus_values)
rownames(clean_metadata) <- gsub("-","\\.",rownames(clean_metadata))

all.equal(colnames(clean_Genus_values), rownames(clean_metadata))

remove_rare <- function( table , cutoff_pro ) {
  row2keep <- c()
  cutoff <- ceiling( cutoff_pro * ncol(table) )  
  for ( i in 1:nrow(table) ) {
    row_nonzero <- length( which( table[ i , ]  > 0 ) ) 
    if ( row_nonzero > cutoff ) {
      row2keep <- c( row2keep , i)
    }
  }
  return( table [ row2keep , , drop=F ])
}

dim(clean_Genus_values)
non_rare_genera <- remove_rare(clean_Genus_values, 0.2)
dim(non_rare_genera)

input_features <- data.frame(apply(non_rare_genera +1, 2, function(x) {log(x) - mean(log(x))})) 
input_features <- data.frame(t(input_features))
rowSums(input_features)
table(clean_metadata$DiseaseState)
classes <- factor(ifelse(clean_metadata$DiseaseState=="EDD","Case","Control"), levels=c("Case","Control"))
table(classes)
clean_metadata$classes <- classes
SAVE_PATH <- "~/etc/my_Tutorials/RF_tutorial/"
set.seed(1995)
seeds <- sample.int(1000000, 10)

source("~/etc/my_Tutorials/RF_tutorial/RF_Utilities.R")
set_cores(20)

get_rf_results(help=T)
rf_results <- get_rf_results(feature_table = input_features, classes = classes, metric="ROC", sampling=NULL,
                             repeats=10, path=SAVE_PATH, nmtry=4, ntree=1001, nfolds=3,
                             ncrossrepeats = 5, pro = 0.8, list_of_seeds = seeds)
get_rf_results(values=T)
boxplot(rf_results[[1]], rf_results[[2]], names=c("Cross Validation AUC", "Test AUC"))
mean(rf_results[[2]])

scrambled_classes <- list()
set.seed(1880)
for(i in 1:10){
  scrambled_classes[[i]] <- sample(classes)
}

rf_random_results <- get_random_rf_results(feature_table = input_features, list_of_scrambles = scrambled_classes, metric="ROC", sampling=NULL,
                                           repeats=10, path=SAVE_PATH, nmtry=4, ntree=1001, nfolds=3,
                                           ncrossrepeats = 5, pro = 0.8, list_of_seeds = seeds)

boxplot(rf_results[[1]], rf_random_results[[1]], names=c("Cross Validation ROC AUC Real", "Cross Validation ROC AUC Random"))
t.test(rf_results[[1]], rf_random_results[[1]])

boxplot(rf_results[[2]], rf_random_results[[2]], names=c("Test ROC AUC Real", "Test ROC AUC Random"))
t.test(rf_results[[2]], rf_random_results[[2]])

colnames(rf_results[[4]][[1]])


## generate ROC cruve

ROC_plot <- generate_ROC_curve(RF_models = rf_results[[5]], dataset = input_features, labels = clean_metadata ,title = "ROC AUC of Enteric Disease Classifcation")
ROC_plot

rownames(input_features)
rownames(rf_results[[5]][[1]]$trainingData)


training_samples <- rownames(rf_results[[5]][[1]]$trainingData)
which(classes %in% training_samples)


#get the samples to predict data from
prediction_set <- input_features[!rownames(input_features) %in% training_samples,]
prediction_set
prediction_set_labels <- classes[!rownames(classes) %in% training_samples,,drop=F]
rownames(classes)

View(rf_results[[4]])
source("~/etc/my_Tutorials/RF_tutorial/RF_Utilities.R")
Total_impt_feats_decrease_in_accuarcy <- Calc_mean_accuray_decrease(rf_results[[4]])
Total_impt_feats_decrease_in_accuarcy[1:1, c("Mean", "SD", "Min","Max")]
Total_impt_feats_decrease_in_accuarcy[1:3, c("Mean", "SD", "Min","Max")]
View(Total_impt_feats_decrease_in_accuarcy)
     