rf_results[[4]]
rf_results[[3]]
rf_results[[1]]
boxplot(rf_results[[1]], rf_results[[2]])
boxplot(rf_results[[1]], rf_results[[2]], names=c("Cross Validation AUC", "Test AUC"))
rf_results <- RandomForestUtils::Run_RF_Pipeline(feature_table = input_features,
classes=classes,
metric = "ROC",
sampling=NULL,
repeats=10,
path=SAVE_PATH,
nmtry=4,
ntree=501,
nfolds=3,
ncrossrepeats = 5,
pro=0.8,
list_of_seeds = seeds)
RandomForestUtils::set_cores(1)
rf_results <- RandomForestUtils::Run_RF_Pipeline(feature_table = input_features,
classes=classes,
metric = "ROC",
sampling=NULL,
repeats=10,
path=SAVE_PATH,
nmtry=4,
ntree=501,
nfolds=3,
ncrossrepeats = 5,
pro=0.8,
list_of_seeds = seeds)
boxplot(rf_results[[1]], rf_results[[2]], names=c("Cross Validation AUC", "Test AUC"))
rf_results <- RandomForestUtils::Run_RF_Pipeline(feature_table = input_features,
classes=classes,
metric = "ROC",
sampling=NULL,
repeats=10,
path=SAVE_PATH,
nmtry=4,
ntree=1001,
nfolds=3,
ncrossrepeats = 5,
pro=0.8,
list_of_seeds = seeds)
boxplot(rf_results[[1]], rf_results[[2]], names=c("Cross Validation AUC", "Test AUC"))
set.seed(1995)
seeds <- sample.int(10000000, 10)
set.seed(1995)
seeds <- sample.int(10000000, 10)
RandomForestUtils::set_cores(20)
rf_results <- RandomForestUtils::Run_RF_Pipeline(feature_table = input_features,
classes=classes,
metric = "ROC",
sampling=NULL,
repeats=10,
path=SAVE_PATH,
nmtry=4,
ntree=1001,
nfolds=3,
ncrossrepeats = 5,
pro=0.8,
list_of_seeds = seeds)
[
boxplot(rf_results[[1]], rf_results[[2]], names=c("Cross Validation AUC", "Test AUC"))
rf_results[[1]]
mean(rf_results[[2]])
levels(classes)
??pRoc::roc
?pROC::roc
classes <- fct_recode(classes, 1="Patient",
0="Healthy")
head(classes)
head(classes)
head(classes)
classes <- clean_metadata$Status
head(classes)
classes <- factor(classes, levels(classes)[c(2,1)])
head(classes)
classes <- fct_recode(classes, 1="Patient",
0="Healthy")
head(classes)
classes <- fct_recode(classes, 1="Patient",
0="Healthy")
library(forcats)
classes <- fct_recode(classes, 1="Patient",
0="Healthy")
classes <- fct_recode(classes, 1="Patient", 0="Healthy")
classes <- fct_recode(classes, Case="Patient",
Control="Healthy")
head(classes)
rf_results <- RandomForestUtils::Run_RF_Pipeline(feature_table = input_features,
classes=classes,
metric = "PR",
sampling=NULL,
repeats=10,
path=SAVE_PATH,
nmtry=4,
ntree=501,
nfolds=3,
ncrossrepeats = 5,
pro=0.8,
list_of_seeds = seeds)
remove.packages("RandomForestUtils")
devtools::install("../RandomForestUtils\")
devtools::install("../RandomForestUtils")
data("Edd_Singh_data")
library(RandomForestUtils)
indexs_to_keep <- which(Edd_Singh_data[[2]]$total_reads >= 1000)
clean_Genus_values <- Edd_Singh_data[[1]][,indexs_to_keep]
clean_metadata <- Edd_Singh_data[[2]][indexs_to_keep,]
rownames(clean_metadata) <- gsub("-","\\.",rownames(clean_metadata))
all.equal(colnames(clean_Genus_values), rownames(clean_metadata))
dim(clean_Genus_values)
non_rare_genera <- remove_rare(clean_Genus_values, 0.2)
dim(non_rare_genera)
input_features <- data.frame(apply(non_rare_genera +1, 2, function(x) {log(x) - mean(log(x))}))
input_features <- data.frame(t(input_features))
classes <- clean_metadata$Status
head(classes)
classes <- factor(classes, levels(classes)[c(2,1)])
head(classes)
library(forcats)
classes <- fct_recode(classes, Case="Patient",
Control="Healthy")
head(classes)
SAVE_PATH <- "~/etc/my_Tutorials/RF_tutorial/testing/"
set.seed(1995)
seeds <- sample.int(10000000, 10)
RandomForestUtils::set_cores(10)
rf_results <- RandomForestUtils::Run_RF_Pipeline(feature_table = input_features,
classes=classes,
metric = "ROC",
sampling=NULL,
repeats=10,
path=SAVE_PATH,
nmtry=4,
ntree=501,
nfolds=3,
ncrossrepeats = 5,
pro=0.8,
list_of_seeds = seeds)
head(classes)
classes <- ordered(classes)
classes
rf_results <- RandomForestUtils::Run_RF_Pipeline(feature_table = input_features,
classes=classes,
metric = "ROC",
sampling=NULL,
repeats=10,
path=SAVE_PATH,
nmtry=4,
ntree=501,
nfolds=3,
ncrossrepeats = 5,
pro=0.8,
list_of_seeds = seeds)
classes
SAVE_PATH <- "~/etc/my_Tutorials/RF_tutorial/testing/"
classes
classes_num <- as.numeric(classes)
classes_num
classes <- clean_metadata$Status
head(classes)
classes <- as.character(clean_metadata$Status)
head(classes)
classes_num <- ifelse(classes=="Patient", 1, 0)
classes_num
seeds <- sample.int(10000000, 10)
set.seed(1995)
seeds <- sample.int(10000000, 10)
rf_results <- RandomForestUtils::Run_RF_Pipeline(feature_table = input_features,
classes=classes_num,
metric = "ROC",
sampling=NULL,
repeats=10,
path=SAVE_PATH,
nmtry=4,
ntree=501,
nfolds=3,
ncrossrepeats = 5,
pro=0.8,
list_of_seeds = seeds)
remove.packages('RandomForestUtils')
devtools::install("../RandomForestUtils")
source('~/etc/my_Tutorials/RF_tutorial/test.R', echo=TRUE)
?pROC::roc
remove.packages("RandomForestUtils")
devtools::install("../RandomForestUtils")
source('~/etc/my_Tutorials/RF_tutorial/test.R', echo=TRUE)
remove.packages("RandomForestUtils")
devtools::install("../RandomForestUtils")
source('~/etc/my_Tutorials/RF_tutorial/test.R', echo=TRUE)
rf_results
remove.packages("RandomForestUtils")
devtools::install("../RandomForestUtils")
source('~/etc/my_Tutorials/RF_tutorial/test.R', echo=TRUE)
rf_results
remove.packages("RandomForestUtils")
devtools::install("../RandomForestUtils")
source('~/etc/my_Tutorials/RF_tutorial/test.R', echo=TRUE)
remove.packages("RandomForestUtils")
devtools::install("../RandomForestUtils")
source('~/etc/my_Tutorials/RF_tutorial/test.R', echo=TRUE)
caret::predict.train()
?caret::predict.train()
?caret::prSummary
remove.packages("RandomForestUtils")
devtools::install("../RandomForestUtils")
source('~/etc/my_Tutorials/RF_tutorial/test.R', echo=TRUE)
remove.packages("RandomForestUtils")
devtools::install("../RandomForestUtils")
source('~/etc/my_Tutorials/RF_tutorial/test.R', echo=TRUE)
View(rf_results)
rf_results$obs
?trainControll
?trainControl
remove.packages("RandomForestUtils")
devtools::install("../RandomForestUtils")
source('~/etc/my_Tutorials/RF_tutorial/test.R', echo=TRUE)
?caret::prSummary
remove.packages("RandomForestUtils")
source('~/etc/my_Tutorials/RF_tutorial/test.R', echo=TRUE)
devtools::install("../RandomForestUtils")
source('~/etc/my_Tutorials/RF_tutorial/test.R', echo=TRUE)
rf_results[[2]]
rf_results[[1]]
rf_results[[2]]
rf_results <- RandomForestUtils::Run_RF_Pipeline(feature_table = input_features,
classes=classes,
metric = "AUC",
sampling=NULL,
repeats=10,
path=SAVE_PATH,
nmtry=4,
ntree=501,
nfolds=3,
ncrossrepeats = 5,
pro=0.8,
list_of_seeds = seeds)
rf_results <- RandomForestUtils::Run_RF_Pipeline(feature_table = input_features,
classes=classes,
metric = "AUC",
sampling=NULL,
repeats=10,
path=SAVE_PATH,
nmtry=4,
ntree=501,
nfolds=3,
ncrossrepeats = 5,
pro=0.8,
list_of_seeds = seeds)
rf_results <- RandomForestUtils::Run_RF_Pipeline(feature_table = input_features,
classes=classes,
metric = "ROC",
sampling=NULL,
repeats=10,
path=SAVE_PATH,
nmtry=4,
ntree=501,
nfolds=3,
ncrossrepeats = 5,
pro=0.8,
list_of_seeds = seeds)
rf_results[[2]]
rf_results[[2]]
rf_results[[2]]
remove.packages("RandomForestUtils")
devtools::install("../RandomForestUtils")
source('~/etc/my_Tutorials/RF_tutorial/test.R', echo=TRUE)
rf_results[[2]]
library(RandomForestUtils)
data("Edd_Singh_data")
indexs_to_keep <- which(Edd_Singh_data[[2]]$total_reads >= 1000)
clean_Genus_values <- Edd_Singh_data[[1]][,indexs_to_keep]
clean_metadata <- Edd_Singh_data[[2]][indexs_to_keep,]
rownames(clean_metadata) <- gsub("-","\\.",rownames(clean_metadata))
all.equal(colnames(clean_Genus_values), rownames(clean_metadata))
dim(clean_Genus_values)
non_rare_genera <- remove_rare(clean_Genus_values, 0.2)
dim(non_rare_genera)
non_rare_genera_RA <- sweep(non_rare_genera, 2, colSums(non_rare_genera), '/')
head(colSums(non_rare_genera_RA))
input_features <- data.frame(t(non_rare_genera_RA))
classes <- Edd_Singh_data[[2]]$Status
head(classes)
classes <- factor(classes, levels(classes)[c(2,1)])
head(classes)
classes <- clean_metadata$Status
head(classes)
classes <- factor(classes, levels(classes)[c(2,1)])
classes <- factor(classes, levels(classes)[c(2,1)])
head(classes)
classes <- forcats::fct_recode(classes, Control="Healthy", Case="Patient")
classes
SAVE_PATH <- "~/etc/my_Tutorials/RF_tutorial/testing/"
set.seed(1995)
seeds <- sample.int(10000000, 10)
RandomForestUtils::set_cores(20)
rf_results <- RandomForestUtils::Run_RF_Pipeline(feature_table = input_features,
classes=classes,
metric = "ROC",
sampling=NULL,
repeats=10,
path=SAVE_PATH,
nmtry=4,
ntree=1001,
nfolds=3,
ncrossrepeats = 5,
pro=0.8,
list_of_seeds = seeds)
boxplot(rf_results[[1]], rf_results[[2]], names=c("Cross Validation AUC", "Test AUC"))
?caret::getTrainPerf
?caret::train
?caret::getTrainPerf
rf_results[[1]]
rf_results[[5]]
rf_results[[5]][[1]]
rf_results[[5]][[1]]
rf_results[[5]][[1]]$results
rf_results[[1]]
caret::getTrainPerf(rf_results[[5]][[1]])
rf_results[[5]][[1]]
rf_results[[5]][[1]]$results
rf_results[[5]][[1]]$bestTune
rf_results[[5]][[1]]$resampledCM
rf_results[[5]][[1]]$resampled
rf_results[[5]][[1]]$resample
rf_results[[5]][[1]]$resample[1]
mean(rf_results[[5]][[1]]$resample[1])
mean(rf_results[[5]][[1]]$resample[1])
median(rf_results[[5]][[1]]$resample[1])
rf_results[[5]][[1]]$resample[1]
str(rf_results[[5]][[1]]$resample[1])
rf_results[[5]][[1]]$resample[1]
rf_results[[5]][[1]]$resample[1]
test <- rf_results[[5]][[1]]$resample[1]
mean(test)
class(test)
test$ROC
mean(test$ROC)
?createMultiFolds
boxplot(rf_results[[1]], rf_results[[2]], names=c("Cross Validation AUC", "Testing AUC"))
scrambled_classes <- list()
set.seed(1880)
scrambled_classes[i] <- sample(classes)
for(i in 1:10){
scrambled_classes[i] <- sample(classes)
}
scrambled_classes <- list()
set.seed(1880)
for(i in 1:10){
scrambled_classes[[i]] <- sample(classes)
}
random_resullts <- get_random_rf_results(feature_table = input_features,
list_of_scrambles = scrambled_classes,
metric = "ROC",
sampling = NULL,
repeats = 10,
path=SAVE_PATH,
nmtry=4,
ntree=1001,
nfolds = 3,
ncrossrepeats = 5,
pro = 0.8,
list_of_seeds = seeds)
remove.packages("RandomForestUtils")
devtools::install("../RandomForestUtils")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(RandomForestUtils)
data("Edd_Singh_data")
indexs_to_keep <- which(Edd_Singh_data[[2]]$total_reads >= 1000)
clean_Genus_values <- Edd_Singh_data[[1]][,indexs_to_keep]
clean_metadata <- Edd_Singh_data[[2]][indexs_to_keep,]
rownames(clean_metadata) <- gsub("-","\\.",rownames(clean_metadata))
all.equal(colnames(clean_Genus_values), rownames(clean_metadata))
dim(clean_Genus_values)
non_rare_genera <- remove_rare(clean_Genus_values, 0.2)
dim(non_rare_genera)
non_rare_genera_RA <- sweep(non_rare_genera, 2, colSums(non_rare_genera), '/')
head(colSums(non_rare_genera_RA))
input_features <- data.frame(t(non_rare_genera_RA))
classes <- clean_metadata$Status
head(classes)
classes <- factor(classes, levels(classes)[c(2,1)])
head(classes)
classes <- forcats::fct_recode(classes, Control="Healthy", Case="Patient")
classes
SAVE_PATH <- "~/etc/my_Tutorials/RF_tutorial/testing/"
set.seed(1995)
seeds <- sample.int(10000000, 10)
RandomForestUtils::set_cores(20)
rf_results <- RandomForestUtils::Run_RF_Pipeline(feature_table = input_features,
classes=classes,
metric = "ROC",
sampling=NULL,
repeats=10,
path=SAVE_PATH,
nmtry=4,
ntree=1001,
nfolds=3,
ncrossrepeats = 5,
pro=0.8,
list_of_seeds = seeds)
boxplot(rf_results[[1]], rf_results[[2]], names=c("Cross Validation AUC", "Testing AUC"))
scrambled_classes <- list()
set.seed(1880)
for(i in 1:10){
scrambled_classes[[i]] <- sample(classes)
}
SAVE_PATH <- "~/etc/my_Tutorials/RF_tutorial/testing/"
random_resullts <- get_random_rf_results(feature_table = input_features,
list_of_scrambles = scrambled_classes,
metric = "ROC",
sampling = NULL,
repeats = 10,
path=SAVE_PATH,
nmtry=4,
ntree=1001,
nfolds = 3,
ncrossrepeats = 5,
pro = 0.8,
list_of_seeds = seeds)
booxplot(rf_results[[2]], random_resullts[[2]], names=c("Test AUROC Real", "Test AUROOC Random"))
boxplot(rf_results[[2]], random_resullts[[2]], names=c("Test AUROC Real", "Test AUROOC Random"))
ROC_plot <- generate_ROC_curve(RF_models = rf_results[[5]], dataset=input_features, labels=clean_metadata, title = "AUROC of Enteric Disease Classifcation")
ROC_plot <- generate_ROC_curve(RF_models = rf_results[[5]], dataset=input_features, labels=classes, title = "AUROC of Enteric Disease Classifcation")
ROC_plot <- generate_ROC_curve(RF_models = rf_results[[5]], dataset=input_features, labels=classes, title = "AUROC of Enteric Disease Classifcation")
ROC_plot <- generate_ROC_curve(RF_models = rf_results[[5]], dataset=input_features, labels=clean_metadata, title = "AUROC of Enteric Disease Classifcation")
clean_metadata$classes <- classes
ROC_plot <- generate_ROC_curve(RF_models = rf_results[[5]], dataset=input_features, labels=clean_metadata, title = "AUROC of Enteric Disease Classifcation")
remove.packages("RandomForestUtils")
devtools::install("../RandomForestUtils")
library(RandomForestUtils)
data("Edd_Singh_data")
indexs_to_keep <- which(Edd_Singh_data[[2]]$total_reads >= 1000)
clean_Genus_values <- Edd_Singh_data[[1]][,indexs_to_keep]
clean_metadata <- Edd_Singh_data[[2]][indexs_to_keep,]
rownames(clean_metadata) <- gsub("-","\\.",rownames(clean_metadata))
all.equal(colnames(clean_Genus_values), rownames(clean_metadata))
dim(clean_Genus_values)
non_rare_genera <- remove_rare(clean_Genus_values, 0.2)
dim(non_rare_genera)
non_rare_genera_RA <- sweep(non_rare_genera, 2, colSums(non_rare_genera), '/')
head(colSums(non_rare_genera_RA))
input_features <- data.frame(t(non_rare_genera_RA))
classes <- clean_metadata$Status
head(classes)
classes <- factor(classes, levels(classes)[c(2,1)])
head(classes)
classes <- forcats::fct_recode(classes, Control="Healthy", Case="Patient")
classes
clean_metadata$classes <- classes
SAVE_PATH <- "~/etc/my_Tutorials/RF_tutorial/testing/"
set.seed(1995)
seeds <- sample.int(10000000, 10)
RandomForestUtils::set_cores(20)
rf_results <- RandomForestUtils::Run_RF_Pipeline(feature_table = input_features,
classes=classes,
metric = "ROC",
sampling=NULL,
repeats=10,
path=SAVE_PATH,
nmtry=4,
ntree=1001,
nfolds=3,
ncrossrepeats = 5,
pro=0.8,
list_of_seeds = seeds)
boxplot(rf_results[[1]], rf_results[[2]], names=c("Cross Validation AUC", "Testing AUC"))
scrambled_classes <- list()
set.seed(1880)
for(i in 1:10){
scrambled_classes[[i]] <- sample(classes)
}
SAVE_PATH <- "~/etc/my_Tutorials/RF_tutorial/testing/"
random_resullts <- get_random_rf_results(feature_table = input_features,
list_of_scrambles = scrambled_classes,
metric = "ROC",
sampling = NULL,
repeats = 10,
path=SAVE_PATH,
nmtry=4,
ntree=1001,
nfolds = 3,
ncrossrepeats = 5,
pro = 0.8,
list_of_seeds = seeds)
boxplot(rf_results[[2]], random_resullts[[2]], names=c("Test AUROC Real", "Test AUROOC Random"))
ROC_plot <- generate_ROC_curve(RF_models = rf_results[[5]], dataset=input_features, labels=clean_metadata, title = "AUROC of Enteric Disease Classifcation")
ROC_plot
Feature_importance_scores <- Calc_mean_accuray_decrease(rf_results[[4]])
knitr::kable(Feature_importance)
knitr::kable(Feature_importance_scores)
View(Feature_importance_scores)
knitr::kable(Feature_importance_scores[1:10, c("Mean", "SD", "Min", "Max")])
remove.packages("RandomForestUtils.Rproj")
remove.packages("RandomForestUtils")
devtools::document()
devtools::install("../RandomForestUtils")
browseVignettes("RandomForestUtils")
devtools::build_vignettes()
devtools::document()
remove.packages("RandomForestUtils")
devtools::install("../RandomForestUtils")
browseVignettes(package = "RandomForestUtils")
build()
R CMD build
browseVignettes(package = "RandomForestUtils")
library(RandomForestUtils)
browseVignettes("RandomForestUtils")
