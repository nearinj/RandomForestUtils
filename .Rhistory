"#00F8B3", "#BEDDFF", "#3DB5A7", "#DD3248", "#B6E4DE", "#427745", "#598C5A", "#B94C59",
"#8181D5", "#94888B", "#FED6BD", "#536D31", "#6EFF92", "#E4E8FF", "#20E200", "#FFD0F2",
"#4C83A1", "#BD7322", "#915C4E", "#8C4787", "#025117", "#A2AA45", "#2D1B21", "#A9DDB0",
"#FF4F78", "#528500", "#009A2E", "#17FCE4", "#71555A", "#525D82", "#00195A", "#967874",
"#555558", "#0B212C", "#1E202B", "#EFBFC4", "#6F9755", "#6F7586", "#501D1D", "#372D00",
"#741D16", "#5EB393", "#B5B400", "#DD4A38", "#363DFF", "#AD6552", "#6635AF", "#836BBA",
"#98AA7F", "#464836", "#322C3E", "#7CB9BA", "#5B6965", "#707D3D", "#7A001D", "#6E4636",
"#443A38", "#AE81FF", "#489079", "#897334", "#009087", "#DA713C", "#361618", "#FF6F01",
"#006679", "#370E77", "#4B3A83", "#C9E2E6", "#C44170", "#FF4526", "#73BE54", "#C4DF72",
"#ADFF60", "#00447D", "#DCCEC9", "#BD9479", "#656E5B", "#EC5200", "#FF6EC2", "#7A617E",
"#DDAEA2", "#77837F", "#A53327", "#608EFF", "#B599D7", "#A50149", "#4E0025", "#C9B1A9",
"#03919A", "#1B2A25", "#E500F1", "#982E0B", "#B67180", "#E05859", "#006039", "#578F9B",
"#305230", "#CE934C", "#B3C2BE", "#C0BAC0", "#B506D3", "#170C10", "#4C534F", "#224451",
"#3E4141", "#78726D", "#B6602B", "#200441", "#DDB588", "#497200", "#C5AAB6", "#033C61",
"#71B2F5", "#A9E088", "#4979B0", "#A2C3DF", "#784149", "#2D2B17", "#3E0E2F", "#57344C",
"#0091BE", "#E451D1", "#4B4B6A", "#5C011A", "#7C8060", "#FF9491", "#4C325D", "#005C8B",
"#E5FDA4", "#68D1B6", "#032641", "#140023", "#8683A9", "#CFFF00", "#A72C3E", "#34475A",
"#B1BB9A", "#B4A04F", "#8D918E", "#A168A6", "#813D3A", "#425218", "#DA8386", "#776133",
"#563930", "#8498AE", "#90C1D3", "#B5666B", "#9B585E", "#856465", "#AD7C90", "#E2BC00",
"#E3AAE0", "#B2C2FE", "#FD0039", "#009B75", "#FFF46D", "#E87EAC", "#DFE3E6", "#848590",
"#AA9297", "#83A193", "#577977", "#3E7158", "#C64289", "#EA0072", "#C4A8CB", "#55C899",
"#E78FCF", "#004547", "#F6E2E3", "#966716", "#378FDB", "#435E6A", "#DA0004", "#1B000F",
"#5B9C8F", "#6E2B52", "#011115", "#E3E8C4", "#AE3B85", "#EA1CA9", "#FF9E6B", "#457D8B",
"#92678B", "#00CDBB", "#9CCC04", "#002E38", "#96C57F", "#CFF6B4", "#492818", "#766E52",
"#20370E", "#E3D19F", "#2E3C30", "#B2EACE", "#F3BDA4", "#A24E3D", "#976FD9", "#8C9FA8",
"#7C2B73", "#4E5F37", "#5D5462", "#90956F", "#6AA776", "#DBCBF6", "#DA71FF", "#987C95",
"#52323C", "#BB3C42", "#584D39", "#4FC15F", "#A2B9C1", "#79DB21", "#1D5958", "#BD744E",
"#160B00", "#20221A", "#6B8295", "#00E0E4", "#102401", "#1B782A", "#DAA9B5", "#B0415D",
"#859253", "#97A094", "#06E3C4", "#47688C", "#7C6755", "#075C00", "#7560D5", "#7D9F00",
"#C36D96", "#4D913E", "#5F4276", "#FCE4C8", "#303052", "#4F381B", "#E5A532", "#706690",
"#AA9A92", "#237363", "#73013E", "#FF9079", "#A79A74", "#029BDB", "#FF0169", "#C7D2E7",
"#CA8869", "#80FFCD", "#BB1F69", "#90B0AB", "#7D74A9", "#FCC7DB", "#99375B", "#00AB4D",
"#ABAED1", "#BE9D91", "#E6E5A7", "#332C22", "#DD587B", "#F5FFF7", "#5D3033", "#6D3800",
"#FF0020", "#B57BB3", "#D7FFE6", "#C535A9", "#260009", "#6A8781", "#A8ABB4", "#D45262",
"#794B61", "#4621B2", "#8DA4DB", "#C7C890", "#6FE9AD", "#A243A7", "#B2B081", "#181B00",
"#286154", "#4CA43B", "#6A9573", "#A8441D", "#5C727B", "#738671", "#D0CFCB", "#897B77",
"#1F3F22", "#4145A7", "#DA9894", "#A1757A", "#63243C", "#ADAAFF", "#00CDE2", "#DDBC62",
"#698EB1", "#208462", "#00B7E0", "#614A44", "#9BBB57", "#7A5C54", "#857A50", "#766B7E",
"#014833", "#FF8347", "#7A8EBA", "#274740", "#946444", "#EBD8E6", "#646241", "#373917",
"#6AD450", "#81817B", "#D499E3", "#979440", "#011A12", "#526554", "#B5885C", "#A499A5",
"#03AD89", "#B3008B", "#E3C4B5", "#96531F", "#867175", "#74569E", "#617D9F", "#E70452",
"#067EAF", "#A697B6", "#B787A8", "#9CFF93", "#311D19", "#3A9459", "#6E746E", "#B0C5AE",
"#84EDF7", "#ED3488", "#754C78", "#384644", "#C7847B", "#00B6C5", "#7FA670", "#C1AF9E",
"#2A7FFF", "#72A58C", "#FFC07F", "#9DEBDD", "#D97C8E", "#7E7C93", "#62E674", "#B5639E",
"#FFA861", "#C2A580", "#8D9C83", "#B70546", "#372B2E", "#0098FF", "#985975", "#20204C",
"#FF6C60", "#445083", "#8502AA", "#72361F", "#9676A3", "#484449", "#CED6C2", "#3B164A",
"#CCA763", "#2C7F77", "#02227B", "#A37E6F", "#CDE6DC", "#CDFFFB", "#BE811A", "#F77183",
"#EDE6E2", "#CDC6B4", "#FFE09E", "#3A7271", "#FF7B59", "#4E4E01", "#4AC684", "#8BC891",
"#BC8A96", "#CF6353", "#DCDE5C", "#5EAADD", "#F6A0AD", "#E269AA", "#A3DAE4", "#436E83",
"#002E17", "#ECFBFF", "#A1C2B6", "#50003F", "#71695B", "#67C4BB", "#536EFF", "#5D5A48",
"#890039", "#969381", "#371521", "#5E4665", "#AA62C3", "#8D6F81", "#2C6135", "#410601",
"#564620", "#E69034", "#6DA6BD", "#E58E56", "#E3A68B", "#48B176", "#D27D67", "#B5B268",
"#7F8427", "#FF84E6", "#435740", "#EAE408", "#F4F5FF", "#325800", "#4B6BA5", "#ADCEFF",
"#9B8ACC", "#885138", "#5875C1", "#7E7311", "#FEA5CA", "#9F8B5B", "#A55B54", "#89006A",
"#AF756F", "#2A2000", "#7499A1", "#FFB550", "#00011E", "#D1511C", "#688151", "#BC908A",
"#78C8EB", "#8502FF", "#483D30", "#C42221", "#5EA7FF", "#785715", "#0CEA91", "#FFFAED",
"#B3AF9D", "#3E3D52", "#5A9BC2", "#9C2F90", "#8D5700", "#ADD79C", "#00768B", "#337D00",
"#C59700", "#3156DC", "#944575", "#ECFFDC", "#D24CB2", "#97703C", "#4C257F", "#9E0366",
"#88FFEC", "#B56481", "#396D2B", "#56735F", "#988376", "#9BB195", "#A9795C", "#E4C5D3",
"#9F4F67", "#1E2B39", "#664327", "#AFCE78", "#322EDF", "#86B487", "#C23000", "#ABE86B",
"#96656D", "#250E35", "#A60019", "#0080CF", "#CAEFFF", "#323F61", "#A449DC", "#6A9D3B",
"#FF5AE4", "#636A01", "#D16CDA", "#736060", "#FFBAAD", "#D369B4", "#FFDED6", "#6C6D74",
"#927D5E", "#845D70", "#5B62C1", "#2F4A36", "#E45F35", "#FF3B53", "#AC84DD", "#762988",
"#70EC98", "#408543", "#2C3533", "#2E182D", "#323925", "#19181B", "#2F2E2C", "#023C32",
"#9B9EE2", "#58AFAD", "#5C424D", "#7AC5A6", "#685D75", "#B9BCBD", "#834357", "#1A7B42",
"#2E57AA", "#E55199", "#316E47", "#CD00C5", "#6A004D", "#7FBBEC", "#F35691", "#D7C54A",
"#62ACB7", "#CBA1BC", "#A28A9A", "#6C3F3B", "#FFE47D", "#DCBAE3", "#5F816D", "#3A404A",
"#7DBF32", "#E6ECDC", "#852C19", "#285366", "#B8CB9C", "#0E0D00", "#4B5D56", "#6B543F",
"#E27172", "#0568EC", "#2EB500", "#D21656", "#EFAFFF", "#682021", "#2D2011", "#DA4CFF",
"#70968E", "#FF7B7D", "#4A1930", "#E8C282", "#E7DBBC", "#A68486", "#1F263C", "#36574E",
"#52CE79", "#ADAAA9", "#8A9F45", "#6542D2", "#00FB8C", "#5D697B", "#CCD27F", "#94A5A1",
"#790229", "#E383E6", "#7EA4C1", "#4E4452", "#4B2C00", "#620B70", "#314C1E", "#874AA6",
"#E30091", "#66460A", "#EB9A8B", "#EAC3A3", "#98EAB3", "#AB9180", "#B8552F", "#1A2B2F",
"#94DDC5", "#9D8C76", "#9C8333", "#94A9C9", "#392935", "#8C675E", "#CCE93A", "#917100",
"#01400B", "#449896", "#1CA370", "#E08DA7", "#8B4A4E", "#667776", "#4692AD", "#67BDA8",
"#69255C", "#D3BFFF", "#4A5132", "#7E9285", "#77733C", "#E7A0CC", "#51A288", "#2C656A",
"#4D5C5E", "#C9403A", "#DDD7F3", "#005844", "#B4A200", "#488F69", "#858182", "#D4E9B9",
"#3D7397", "#CAE8CE", "#D60034", "#AA6746", "#9E5585", "#BA6200")
generate_ROC_curve <- function(RF_models, dataset, labels, title){
AUC_data <- vector()
ROC_data <- list()
ROC_curve_data <- list()
ROC_sens <- list()
ROC_specs <- list()
for(i in 1:length(RF_models)){
prefix <- paste0("t",i)
#grab the samples that the model was trained on
training_samples <- rownames(RF_models[[i]]$trainingData)
#get the samples to predict data from
prediction_set <- dataset[!rownames(dataset) %in% training_samples,]
prediction_set_labels <- labels[!rownames(labels) %in% training_samples,,drop=F]
#make predictions on this dataset using the final model
variables_used <- head(colnames(RF_models[[i]]$trainingData), -1)
predicts <- predict(RF_models[[i]], prediction_set[,variables_used], type="prob")
roc_data <- pROC::roc(prediction_set_labels$classes, predicts[,1], levels=c("Control", "Case"), direction=">")
sens <- roc_data$sensitivities
specs <- roc_data$specificities
indexs_to_keep <- floor(seq(1, length(sens), length=40))
ROC_sens[[prefix]] <- sens[indexs_to_keep]
ROC_specs[[prefix]] <- specs[indexs_to_keep]
AUC_data <- c(AUC_data, roc_data$auc)
if(i==1){
plot(roc_data, xlim=c(1,0), ylim=c(0,1), col="red")
}else{
plot(roc_data,add=T, xlim=c(1,0), ylim=c(0,1))
}
}
ROC_curve_data[[1]] <- do.call(cbind, ROC_sens)
ROC_curve_data[[2]] <- do.call(cbind, ROC_specs)
#turn data into long form
SENS_melt <- reshape2::melt(ROC_curve_data[[1]])
SPEC_melt <- reshape2::melt(ROC_curve_data[[2]])
if(all.equal(SENS_melt$Var1, SPEC_melt$Var1) & all.equal(SENS_melt$Var2, SPEC_melt$Var2)){
SENS_melt$Value2 <- SPEC_melt$value
}else(
message("values dont match")
)
#alright so we have the sens and spec for each thing so lets generate curves from each column
#calc mean values this part i'm not 100% sure how to do....
SENs_values <- as.data.frame(cbind(ROC_curve_data[[1]], t(apply(ROC_curve_data[[1]], 1, Stats))))
SPEC_values <- as.data.frame(cbind(ROC_curve_data[[2]], t(apply(ROC_curve_data[[2]], 1, Stats))))
mean_values <- data.frame(Sens= SENs_values$Mean,
Specs= SPEC_values$Mean)
AUC_label <- paste("Mean AUC", round(mean(AUC_data), digits=5))
plot <- ggplot() + geom_path(data=SENS_melt, mapping=aes(x=Value2, y=value, group=Var2), alpha=0.05) + xlab("Specificity") +
ylab("Sensitivity") + scale_x_reverse() + scale_color_manual(values = COLORS) + theme(legend.position = "none") +
geom_abline(intercept=1, slope=1) + geom_line(data=mean_values, aes(x=Specs, y=Sens), color="Red") + ggtitle(title) +
annotate(geom="text", y=0, x=0.2, label=AUC_label, color="red")
return(plot)
}
train_random_gene_model <- function(random_genes, classes, input_features, grid, sampling){
cv <- caret::trainControl(method="repeatedcv",
number=3,
returnResamp = "final",
summaryFunction=caret::twoClassSummary,
classProbs=TRUE,
savePredictions = TRUE)
message("train ctl done")
cv$sampling <- sampling
random_gene_model <- caret::train(input_features[,random_genes], classes,
method="rf",
trControl=cv,
metric="ROC",
tuneGrid=grid,
ntree=1001,
importance=TRUE)
return(random_gene_model)
}
generate_AUROC_random <- function(RF_model, classes, dataset){
}
### load within dataset models
### load in the models
GSE20194_all_model <- readRDS("~/projects/Taxol-Mo-Project/RF_Results/within_dataset/GSE20194/smote/All_genes/_masterlist.rds")
GSE20194_curated_model <- readRDS("~/projects/Taxol-Mo-Project/RF_Results/within_dataset/GSE20194/smote/curated/_masterlist.rds")
GSE20194_random_model <- readRDS("~/projects/Taxol-Mo-Project/RF_Results/within_dataset/GSE20194/smote/random_gene/_masterlist.rds")
GSE20194_random_model
colnames(GSE20194_random_model[[5]]$t1$trainingData)
colnames(GSE20194_random_model[[5]]$t2$trainingData)
colnames(GSE20194_random_model[[5]]$t3$trainingData)
GSE25055_all_model <- readRDS("~/projects/Taxol-Mo-Project/RF_Results/within_dataset/GSE25055/smote/all_genes/_masterlist.rds")
GSE25055_curated_model <- readRDS("~/projects/Taxol-Mo-Project/RF_Results/within_dataset/GSE25055/smote/curated/_masterlist.rds")
GSE25055_random_model <- readRDS("~/projects/Taxol-Mo-Project/RF_Results/within_dataset/GSE25055/smote/Random_genes/_masterlist.rds")
GSE25055_random_model[[2]]
GSE25055_random_model[[5]]
colnames(GSE25055_random_model[[5]]$t1$trainingData)
colnames(GSE25055_random_model[[5]]$t2$trainingData)
GSE25065_all_model <- readRDS("~/projects/Taxol-Mo-Project/RF_Results/within_dataset/GSE25065/smote/all_gene/_masterlist.rds")
GSE25065_curated_model <- readRDS("~/projects/Taxol-Mo-Project/RF_Results/within_dataset/GSE25065/smote/curated/_masterlist.rds")
GSE25065_random_model <- readRDS("~/projects/Taxol-Mo-Project/RF_Results/within_dataset/GSE25065/smote/Random_Genes/_masterlist.rds")
GSE25065_random_model[[5]]$t1
colnames(GSE25065_random_model[[5]]$t1$trainingData)
colnames(GSE25065_random_model[[5]]$t2$trainingData)
GSE50948_all_model <- readRDS("~/projects/Taxol-Mo-Project/RF_Results/within_dataset/GSE50948/smote/all_genes/_masterlist.rds")
GSE50948_curated_model <- readRDS("~/projects/Taxol-Mo-Project/RF_Results/within_dataset/GSE50948/smote/curated_genes/_masterlist.rds")
GSE50948_random_model <- readRDS("~/projects/Taxol-Mo-Project/RF_Results/within_dataset/GSE50948/smote/random_genes/_masterlist.rds")
GSE50948_random_model[[5]]$t1
colnames(GSE50948_random_model[[5]]$t1$trainingData)
colnames(GSE50948_random_model[[5]]$t2$trainingData)
colnames(GSE50948_random_model[[5]]$t6$trainingData)
GSE20194_curated2 <- readRDS("~/projects/Taxol-Mo-Project/RF_Results/within_dataset/GSE20194/smote/curated2/_masterlist.rds")
GSE20194_random2 <- readRDS("~/projects/Taxol-Mo-Project/RF_Results/within_dataset/GSE20194/smote/random2_gene/_masterlist.rds")
GSE20194_random2[[5]]$t1
colnames(GSE20194_random2[[5]]$t11$trainingData)
colnames(GSE20194_random2[[5]]$t21$trainingData)
GSE25055_curated2 <- readRDS("~/projects/Taxol-Mo-Project/RF_Results/within_dataset/GSE25055/smote/curated2/_masterlist.rds")
GSE25055_random2 <- readRDS("~/projects/Taxol-Mo-Project/RF_Results/within_dataset/GSE25055/smote/random2_gene/_masterlist.rds")
GSE25055_random2[[5]]$t10
colnames(GSE25055_random2[[5]]$t10$trainingData)
colnames(GSE25055_random2[[5]]$t20$trainingData)
GSE25065_curated2 <- readRDS("~/projects/Taxol-Mo-Project/RF_Results/within_dataset/GSE25065/smote/curated2/_masterlist.rds")
GSE25065_random2 <- readRDS("~/projects/Taxol-Mo-Project/RF_Results/within_dataset/GSE25065/smote/random2_gene/_masterlist.rds")
GSE25065_random2
colnames(GSE25065_random2[[5]]$t1$trainingData)
colnames(GSE25065_random2[[5]]$t2$trainingData)
GSE50948_curated2 <- readRDS("~/projects/Taxol-Mo-Project/RF_Results/within_dataset/GSE50948/smote/curated2/_masterlist.rds")
GSE50948_random2 <- readRDS("~/projects/Taxol-Mo-Project/RF_Results/within_dataset/GSE50948/smote/random2_genes/_masterlist.rds")
GSE20194_curated2_ROC <- generate_ROC_curve(RF_models = GSE20194_curated2[[5]], dataset = curated2_GSE20194, labels = GSE20194_classes, title="Curated Gene List 2 Preformance")
GSE20194_random2_ROC <- generate_ROC_curve(RF_models = GSE20194_random2[[5]], dataset=GSE20194_exp_clean, labels = GSE20194_classes, title="Eight Random Gene Preformance")
GSE20194_curated2_ROC <- generate_ROC_curve(RF_models = GSE20194_curated2[[5]], dataset = curated2_GSE20194, labels = GSE20194_classes, title="GSE20194 Curated Gene List 2 Preformance")
GSE20194_random2_ROC <- generate_ROC_curve(RF_models = GSE20194_random2[[5]], dataset=GSE20194_exp_clean, labels = GSE20194_classes, title="GSE20194 Eight Random Gene Preformance")
GSE25055_curated2_ROC <- generate_ROC_curve(RF_models = GSE25055_curated2[[5]], dataset=curated2_GSE25055, labels = GSE25055_classes, title="GSE25055 Curated Gene List 2 Preformance")
GSE20194_curated2_ROC <- generate_ROC_curve(RF_models = GSE20194_curated2[[5]], dataset = curated2_GSE20194, labels = GSE20194_classes, title="GSE20194 Curated Gene List 2 Performance")
GSE20194_random2_ROC <- generate_ROC_curve(RF_models = GSE20194_random2[[5]], dataset=GSE20194_exp_clean, labels = GSE20194_classes, title="GSE20194 Eight Random Gene Performance")
GSE25055_curated2_ROC <- generate_ROC_curve(RF_models = GSE25055_curated2[[5]], dataset=curated2_GSE25055, labels = GSE25055_classes, title="GSE25055 Curated Gene List 2 Performance")
GSE25055_random2_ROC <- generate_ROC_curve(RF_models = GSE25055_random2[[5]], dataset=GSE25055_exp, labels = GSE25055_classes, title="GSE25055 Eight Random Gene Performance")
GSE25065_curated2_ROC <- generate_ROC_curve(RF_models = GSE25065_curated2[[5]], dataset=curated2_GSE25065, labels=GSE25065_classes, title="GSE25065 Curated Gene List 2 Performance")
GSE25065_curated2_ROC <- generate_ROC_curve(RF_models = GSE25065_curated2[[5]], dataset=curated2_GSE25065, labels=GSE25065_classes, title="GSE25065 Curated Gene List Performance")
GSE25065_random2_ROC <- generate_ROC_curve(RF_models = GSE25065_random2[[5]], dataset=GSE25065_exp_clean, labels=GSE25065_classes, title="GSE25065 Eight Random Gene List Performance")
GSE50948_curated2_ROC <- generate_ROC_curve(RF_models = GSE50948_curated2[[5]], dataset=curated2_GSE50948, labels=GSE50948_classes, title="GSE50948 Curated Gene List 2 Performance")
GSE25065_curated2_ROC <- generate_ROC_curve(RF_models = GSE25065_curated2[[5]], dataset=curated2_GSE25065, labels=GSE25065_classes, title="GSE25065 Curated Gene List 2 Performance")
GSE50948_random2_ROC <- generate_ROC_curve(RF_models = GSE50948_random2[[5]], dataset=GSE50948_exp, labels = GSE50948_classes, title="GSE50948 Eight Random Gene Performance")
ROC_performance2 <- plot_grid(GSE20194_curated2_ROC, GSE25055_curated2_ROC, GSE25065_curated2_ROC, GSE50948_curated2_ROC,
GSE20194_random2_ROC, GSE25055_random2_ROC, GSE25065_random2_ROC, GSE50948_curated2_ROC, nrow=2)
ROC_performance2
GSE50948_curated2[[5]]$t1$trainingData
colnames(GSE50948_curated2[[5]]$t1$trainingData)
colnames(GSE50948_curated2[[5]]$t2$trainingData)
colnames(GSE50948_random2[[5]]$t2$trainingData)
ROC_performance2 <- plot_grid(GSE20194_curated2_ROC, GSE25055_curated2_ROC, GSE25065_curated2_ROC, GSE50948_curated2_ROC,
GSE20194_random2_ROC, GSE25055_random2_ROC, GSE25065_random2_ROC, GSE50948_random2_ROC, nrow=2)
ROC_performance2
Model_performance2 <- boxplot(GSE20194_curated2[[2]], GSE25055_curated2[[2]], GSE25065_curated2[[2]], GSE50948_curated2[[2]],
GSE20194_random2[[2]], GSE25055_random2[[2]], GSE25065_random2[[2]], GSE50948_random2[[2]])
Model_performance2 <- boxplot(GSE20194_curated2[[2]], GSE25055_curated2[[2]], GSE25065_curated2[[2]], GSE50948_curated2[[2]],
GSE20194_random2[[2]], GSE25055_random2[[2]], GSE25065_random2[[2]], GSE50948_random2[[2]], xaxt="n", col=c("red", "red", "blue", "blue", "pink", "pink", "orange", "orange"))
Model_performance2 <- boxplot(GSE20194_curated2[[2]], GSE20194_random2[[2]], GSE25055_curated2[[2]], GSE25055_random[[2]],
GSE25065_curated2[[2]], GSE25065_random2[[2]], GSE50948_curated2[[2]], GSE50948_random2[[2]], xaxt="n", col=c("red", "red", "blue", "blue", "pink", "pink", "orange", "orange"))
Model_performance2 <- boxplot(GSE20194_curated2[[2]], GSE20194_random2[[2]], GSE25055_curated2[[2]], GSE25055_random2[[2]],
GSE25065_curated2[[2]], GSE25065_random2[[2]], GSE50948_curated2[[2]], GSE50948_random2[[2]], xaxt="n", col=c("red", "red", "blue", "blue", "pink", "pink", "orange", "orange"))
axis(1, labels=c("Curated", "Random", "Curated", "Random", "Curated", "Random", "Curated", "Random"), at=c(1:8), las=1)
axis(1, labels=c("GSE20194", "GSE25055", "GSE25065", "GSE50948"), at=c(1.5, 3.5, 5.5, 7.5))
axis(1, labels=c("GSE20194", "GSE25055", "GSE25065", "GSE50948"), at=c(1.5, 3.5, 5.5, 7.5), padj=3)
abline(h=0.5)
Model_performance2 <- boxplot(GSE20194_curated2[[2]], GSE20194_random2[[2]], GSE25055_curated2[[2]], GSE25055_random2[[2]],
GSE25065_curated2[[2]], GSE25065_random2[[2]], GSE50948_curated2[[2]], GSE50948_random2[[2]], xaxt="n", col=c("red", "red", "blue", "blue", "pink", "pink", "orange", "orange"))
axis(1, labels=c("Curated", "Random", "Curated", "Random", "Curated", "Random", "Curated", "Random"), at=c(1:8), las=1)
axis(1, labels=c("GSE20194", "GSE25055", "GSE25065", "GSE50948"), at=c(1.5, 3.5, 5.5, 7.5), padj=3)
abline(h=0.5)
GSE20194_curated2_hits <- Calc_mean_accuray_decrease(GSE20194_curated2[[4]])
GSE20194_curated2_hits$feature <- factor(rownames(GSE20194_curated2), levels=rownames(GSE20194_curated2))
GSE20194_curated2_hits$feature <- factor(rownames(GSE20194_curated2_hits), levels=rownames(GSE20194_curated2_hits))
GSE25055_curated2_hits <- Calc_mean_accuray_decrease(GSE25055_curated2[[4]])
GSE25055_curated2_hits <- Calc_mean_accuray_decrease(GSE25055_curated2[[4]])
GSE25055_curated2_hits$feature <- factor(rownames(GSE25055_curated2_hits), levels=rownames(GSE25055_curated2_hits))
GSE25065_curated2_hits <- Calc_mean_accuray_decrease(GSE25065_curated2[[4]])
GSE25065_curated2_hits <- Calc_mean_accuray_decrease(GSE25065_curated2[[4]])
GSE25065_curated2_hits$feature <- factor(rownames(GSE25065_curated2_hits), levels=rownames(GSE25065_curated2_hits))
GSE20194_curat2_feats <- ggplot(GSE20194_curated2_hits, aes(x=feature, y=Mean)) + geom_point() + coord_flip() + geom_errorbar(aes(ymin=Mean- SD, ymax=Mean + SD)) + xlab("Gene name") + ylab("Mean decrease in accuracy")
GSE25055_curat2_feats <- ggplot(GSE25055_curated2_hits, aes(x=feature, y=Mean)) + geom_point() + coord_flip() + geom_errorbar(aes(ymin=Mean- SD, ymax=Mean + SD)) + xlab("Gene name") + ylab("Mean decrease in accuracy")
GSE25065_curat_feats <- ggplot(GSE25065_curated2_hits, aes(x=feature, y=Mean)) + geom_point() + coord_flip() + geom_errorbar(aes(ymin=Mean- SD, ymax=Mean + SD)) + xlab("Gene name") + ylab("Mean decrease in accuracy")
library(HealthyOralMicrobiome)
library(corncob)
library(phyloseq)
library(dplyr)
library(tibble)
library(gplots)
#Load in metadata
Metadata <- HealthyOralMicrobiome::Healthy_Metadata
dim(Metadata)
#load in ASV table
ASV_tab <- HealthyOralMicrobiome::Healthy_ASV_table
dim(ASV_tab)
#load in Genus table
Genus_tab <- HealthyOralMicrobiome::Healthy_Genus_Table
dim(Genus_tab)
### Filter the samples
Comp_ASV_data <- Filt_samples(depth=5000, setType="complete", Taxa_table = ASV_tab, Metadata = Metadata, parallel = 20, cutoff_prop = 0.1)
Comp_Genus_data <- Filt_samples(depth=5000, setType="complete", Taxa_table = Genus_tab, Metadata = Metadata, parallel = 20, cutoff_prop = 0.1)
rownames(Metadata)
grep("100260835" ,rownames(Metadata))
write.csv(rownames(Metadata), file="sample_names.txt")
write.csv(rownames(Metadata), file="~/sample_names.txt")
write.csv(rownames(Metadata), file="~/sample_names.txt", row.names = F)
write.csv(rownames(Metadata), file="~/sample_names.txt", row.names = F, quote=F)
rownames(Metadata)
rownames(Metadata)[which(Metadata$Extraction_Number=="17")]
Metadata$Extraction_Number
rownames(Metadata)[which(Metadata$Extraction_Number=="Extraction.17")]
dim(Metadata)
table(Metadata$Economic.Region)
library(HealthyOralMicrobiome)
HealthyOralMicrobiome::Comp_W_unifrac_res
W_unifrac <- HealthyOralMicrobiome::Comp_W_unifrac_res
library(HealthyOralMicrobiome)
library(vegan)
#Load in metadata
Metadata <- HealthyOralMicrobiome::Healthy_Metadata
dim(Metadata)
W_unifrac <- HealthyOralMicrobiome::get_beta_div("w_unifrac", "complete", Metadata)
Bray_curt <- HealthyOralMicrobiome::get_beta_div("bray_curtis", "complete", Metadata)
Weighted_Uni_res <- HealthyOralMicrobiome::Comp_W_unifrac_res
w_uni_p <- vector()
for(feat in names(Weighted_Uni_res)){
w_uni_p[[feat]] <- Weighted_Uni_res[[feat]]$`Pr(>F)`[2]
}
w_uni_p
w_uni_fdr <- p.adjust(w_uni_p, method="fdr")
w_uni_fdr
weighted_sig_feats <- names(which(w_uni_fdr < 0.1))
weighted_R2_vals <- vector()
for(feat in names(Weighted_Uni_res)){
weighted_R2_vals[[feat]] <- Weighted_Uni_res[[feat]]$R2[2]
}
sig_r2_vals <- weighted_R2_vals[which(names(weighted_R2_vals) %in% weighted_sig_feats)]
sig_r2_vals
sig_p_vals <- w_uni_p[which(names(w_uni_p) %in% weighted_sig_feats)]
sig_p_vals
sig_q_vals <- w_uni_fdr[which(names(w_uni_fdr) %in% weighted_sig_feats)]
sig_q_vals
table2 <- data.frame("p "=sig_p_vals,
"q "=sig_q_vals,
"R2"=sig_r2_vals, check.names = F)
sup_file_tab <- data.frame("Feature"=names(w_uni_p), "P value"=w_uni_p,
"Q value"=w_uni_fdr, "R2 value"=weighted_R2_vals)
View(sup_file_tab)
write.csv(sup_file_tab, ~/w_uni_res.txt)
write.csv(sup_file_tab, '~/w_uni_res.txt')
Bray_curt_res <- HealthyOralMicrobiome::Comp_Bray_curt_res
bray_p_vals <- vector()
for(feat in names(Bray_curt_res)){
bray_p_vals[[feat]] <- Bray_curt_res[[feat]]$`Pr(>F)`[2]
}
bray_q_vals <- p.adjust(bray_p_vals, method="fdr")
bray_sig_feats <- names(which(bray_q_vals < 0.1))
bray_sig_feats
bray_r2_vals <- vector()
for(feat in names(Bray_curt_res)){
bray_r2_vals[[feat]] <- Bray_curt_res[[feat]]$R2[2]
}
bray_sig_r2_vals <- bray_r2_vals[which(names(bray_r2_vals) %in% bray_sig_feats)]
bray_sig_r2_vals
bray_sig_p_vals <- bray_p_vals[which(names(bray_p_vals) %in% bray_sig_feats)]
bray_sig_p_vals
bray_sig_q_vals <- bray_q_vals[which(names(bray_q_vals) %in% bray_sig_feats)]
bray_sig_q_vals
sup_file_tab2 <- data.frame("Feature"=name(bray_p_vals),
"P value"=bray_p_vals,
"Q value"=bray_q_vals,
"R2 value"=bray_r2_vals)
sup_file_tab2 <- data.frame("Feature"=names(bray_p_vals),
"P value"=bray_p_vals,
"Q value"=bray_q_vals,
"R2 value"=bray_r2_vals)
write.csv(sup_file_tab2, "~/bray_sup_file_res.txt")
library(HealthyOralMicrobiome)
library(vegan)
#Load in metadata
Metadata <- HealthyOralMicrobiome::Healthy_Metadata
dim(Metadata)
W_unifrac <- HealthyOralMicrobiome::get_beta_div("w_unifrac", "validation", Metadata)
Bray_curt <- HealthyOralMicrobiome::get_beta_div("bray_curtis", "validation", Metadata)
dim(W_unifrac[["Distance"]])
Valid_W_unifrac_res <- HealthyOralMicrobiome::Valid_W_unifrac_res
Valid_w_uni_p <- vector()
weighted_sig_feats <- c("PM_WAIST_AVG", "PM_WAIST_HIP_RATIO", "PM_STANDING_HEIGHT_AVG", "PM_BIOIMPED_WEIGHT",
"A_SDC_AGE_CALC", "A_SDC_GENDER", "A_SLE_LIGHT_EXP", "NUT_VEG_DAY_QTY",
"REFINED_GRAIN_SERVINGS_DAY_QTY", "NUTS_SEEDS_SERVINGS_PER_DAY", "SALT_SEASONING", "PM_BIOIMPED_FFM")
for(feat in weighted_sig_feats){
Valid_w_uni_p[[feat]] <- Valid_W_unifrac_res[[feat]]$`Pr(>F)`[2]
}
Valid_w_uni_p
Valid_sig_w_uni_p <- Valid_w_uni_p[which(Valid_w_uni_p < 0.05)]
valid_sig_w_uni_feats <- names(Valid_w_uni_p[which(Valid_w_uni_p < 0.05)])
valid_sig_w_uni_feats
Valid_w_uni_r2 <- vector()
for(feat in weighted_sig_feats){
Valid_w_uni_r2[[feat]] <- Valid_W_unifrac_res[[feat]]$R2[2]
}
Valid_sig_w_uni_r2 <- Valid_w_uni_r2[which(Valid_w_uni_p < 0.05)]
Valid_sig_w_uni_r2
Valid_table_res_df <- data.frame("feature"=names(Valid_w_uni_p),
"p"=Valid_w_uni_p,
"R2"=Valid_w_uni_r2,
stringsAsFactors = F)
write.csv(Valid_table_res_df, '~/w_uni_valid_res.txt')
Valid_Bray_res <- HealthyOralMicrobiome::Valid_Bray_res
Valid_Bray_p <- vector()
bray_sig_feats <- c("A_HS_DENTAL_VISIT_LAST", "PM_BIOIMPED_BMI", "PM_WAIST_AVG", "PM_WAIST_HIP_RATIO",
"PM_STANDING_HEIGHT_AVG", "PM_BIOIMPED_WEIGHT", "A_SDC_AGE_CALC", "A_SDC_GENDER",
"A_SLE_LIGHT_EXP", "NUT_VEG_DAY_QTY", "NUT_JUICE_DAY_QTY", "REFINED_GRAIN_SERVINGS_DAY_QTY",
"PM_BIOIMPED_FFM")
for(feat in bray_sig_feats){
Valid_Bray_p[[feat]] <- Valid_Bray_res[[feat]]$`Pr(>F)`[2]
}
Valid_Bray_sig_feats <- names(Valid_Bray_p[which(Valid_Bray_p < 0.05)])
Valid_Bray_sig_feats
Valid_Bray_sig_p <- Valid_Bray_p[which(Valid_Bray_p < 0.05)]
Valid_Bray_r2 <- vector()
for(feat in bray_sig_feats){
Valid_Bray_r2[[feat]] <- Valid_Bray_res[[feat]]$R2[2]
}
Valid_Bray_sig_r2 <- Valid_Bray_r2[which(Valid_Bray_p < 0.05)]
Valid_Bray_sig_r2
Valid_Bray_res_Tab <- data.frame("feature"=names(Valid_Bray_p),
"p"=Valid_Bray_p,
"R2"=Valid_Bray_r2)
write.csv(Valid_Bray_res_Tab, '~/bray_valid_res.xt')
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(HealthyOralMicrobiome)
Metadata <- HealthyOralMicrobiome::Healthy_Metadata
dim(Metadata)
Metadata_alpha_Comp <- HealthyOralMicrobiome::get_alpha_divs(Metadata, "complete")
features_to_test <- colnames(Metadata)[-42]
features_to_test
### test each feature
faiths_p <- vector()
for(feat in features_to_test){
faiths_p[[feat]] <- HealthyOralMicrobiome::run_alpha_compare(df= Metadata_alpha_Comp, feature = feat, type="faiths")
}
faiths_p
#apply fdr
faiths_q <- p.adjust(faiths_p, method = "fdr")
min(faiths_q)
### none pass alpha value of 0.1
shannon_p <- vector()
for(feat in features_to_test){
shannon_p[[feat]] <- HealthyOralMicrobiome::run_alpha_compare(df=Metadata_alpha_Comp, feature = feat, type="shannon")
}
shannon_q <- p.adjust(shannon_p, method = "fdr")
min(shannon_q)
## none pass fdr of 0.1
evenness_p <- vector()
for(feat in features_to_test){
evenness_p[[feat]] <- HealthyOralMicrobiome::run_alpha_compare(df=Metadata_alpha_Comp, feature=feat, type="evenness")
}
evenness_q <- p.adjust(evenness_p, method = "fdr")
min(evenness_q)
## none pass fdr of 0.1
richness_p <- vector()
for(feat in features_to_test){
richness_p[[feat]] <- HealthyOralMicrobiome::run_alpha_compare(df=Metadata_alpha_Comp, feature=feat, type="richness")
}
richness_q <- p.adjust(richness_p, method="fdr")
min(richness_q)
## none pass alpha of 0.1
Supplemental_file <- data.frame("feature"=names(richness_q),
"Faith's PD P value"=faiths_p,
"Richness P value"=richness_p,
"Shannon P value"=shannon_p,
"Evenness P value"=evenness_p,
"Faith's PD Q value"=faiths_q,
"Richness Q value"=richness_q,
"Shannon Q value"=shannon_q,
"Evenness Q value"=evenness_q)
write.csv(Supplemental_file, "~/alpha_res.txt")
library(RandomForestUtils)
data("Edd_Singh_data")
indexs_to_keep <- which(Edd_Singh_data[[2]]$total_reads >= 1000)
clean_Genus_values <- Edd_Singh_data[[1]][,indexs_to_keep]
clean_metadata <- Edd_Singh_data[[2]][indexs_to_keep,]
rownames(clean_metadata) <- gsub("-","\\.",rownames(clean_metadata))
all.equal(colnames(clean_Genus_values), rownames(clean_metadata))
dim(clean_Genus_values)
We can see that we have a total of 153 Genera and 272 Samples.
Next we will remove any rare genera that are only found in a few individuals.
```{r, eval=F}
non_rare_genera <- remove_rare(clean_Genus_values, 0.2)
dim(non_rare_genera)
non_rare_genera_RA <- sweep(non_rare_genera, 2, colSums(non_rare_genera), '/')
head(colSums(non_rare_genera_RA))
input_features <- data.frame(t(non_rare_genera_RA))
classes <- clean_metadata$Status
head(classes)
classes <- factor(classes, levels(classes)[c(2,1)])
head(classes)
classes <- forcats::fct_recode(classes, Control="Healthy", Case="Patient")
classes
clean_metadata$classes <- classes
SAVE_PATH <- "~/etc/my_Tutorials/RF_tutorial/testing/"
set.seed(1995)
seeds <- sample.int(10000000, 10)
RandomForestUtils::set_cores(1)
rf_results <- RandomForestUtils::Run_RF_Pipeline(feature_table = input_features,
classes=classes,
metric = "ROC",
sampling=NULL,
repeats=10,
path=SAVE_PATH,
nmtry=4,
ntree=1001,
nfolds=3,
ncrossrepeats = 5,
pro=0.8,
list_of_seeds = seeds)
boxplot(rf_results[[1]], rf_results[[2]], names=c("Cross Validation AUC", "Testing AUC"))
scrambled_classes <- list()
set.seed(1880)
for(i in 1:10){
scrambled_classes[[i]] <- sample(classes)
}
SAVE_PATH <- "~/etc/my_Tutorials/RF_tutorial/testing/"
random_resullts <- get_random_rf_results(feature_table = input_features,
list_of_scrambles = scrambled_classes,
metric = "ROC",
sampling = NULL,
repeats = 10,
path=SAVE_PATH,
nmtry=4,
ntree=1001,
nfolds = 3,
ncrossrepeats = 5,
pro = 0.8,
list_of_seeds = seeds)
ROC_plot <- generate_ROC_curve(RF_models = rf_results[[5]], dataset=input_features, labels=clean_metadata, title = "AUROC of Enteric Disease Classifcation")
ROC_plot
Feature_importance_scores <- Calc_mean_accuray_decrease(rf_results[[4]])
knitr::kable(Feature_importance_scores[1:10, c("Mean", "SD", "Min", "Max")])
?devtools::install_github
devtools::install_github("nearinj/RandomForestUtils")
